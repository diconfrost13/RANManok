///////////////////////////////////////////////////////////////////////////////
// s_CLock.cpp
//
// class CLcok
//
// * History
// 2002.05.30 jgkim Create
//
// Copyright 2002-2003 (c) Mincoms. All rights reserved.                 
// 
// * Note :
// 
///////////////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "s_CLock.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

CLock::CLock()
{
	//////////////////////////////////////////////////////////////////////////////
	// Mutex Version
	m_Mutex = CreateMutex(NULL, false, NULL);

	//////////////////////////////////////////////////////////////////////////////
	// Critical Section Version		
	InitializeCriticalSection(&m_CriticalSection); 
}

CLock::~CLock()
{
	//////////////////////////////////////////////////////////////////////////////
	// Mutex Version
	if (m_Mutex != NULL)
	{
		CloseHandle(m_Mutex);
		m_Mutex = NULL;
	}

	//////////////////////////////////////////////////////////////////////////////
	// Critical Section Version
	DeleteCriticalSection(&m_CriticalSection);
}

void CLock::LockOnC()
{	
	//////////////////////////////////////////////////////////////////////////////
	// Critical Section Version
	EnterCriticalSection(&m_CriticalSection);
}

void CLock::LockOnM()
{
	//////////////////////////////////////////////////////////////////////////////
	// Mutex Version
	WaitForSingleObject(m_Mutex, INFINITE);
}

void CLock::LockOffC() 
{	
	//////////////////////////////////////////////////////////////////////////////
	// Critical Section Version
	LeaveCriticalSection(&m_CriticalSection);
}

void CLock::LockOffM()
{
	//////////////////////////////////////////////////////////////////////////////
	// Mutex Version
	ReleaseMutex(m_Mutex);
}